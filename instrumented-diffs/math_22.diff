diff --git a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java
index 8b0993c4d..9c57c8224 100644
--- a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java
@@ -126,6 +126,33 @@ public class FDistribution extends AbstractRealDistribution {
      * @since 2.1
      */
     public double density(double x) {
+        if (Boolean.parseBoolean(System.getProperty("defects4j.instrumentation.enabled"))) {
+            double returnValue = density_original(x);
+            double upperBound = getSupportUpperBound();
+            double lowerBound = getSupportLowerBound();
+            if (x == upperBound) {
+                boolean upperBoundRule = !isSupportUpperBoundInclusive() || !Double.isInfinite(returnValue) && !Double.isNaN(returnValue);
+                if (!upperBoundRule) {
+                    throw new RuntimeException("[Defects4J_BugReport_Violation]");
+                } else {
+                    return returnValue;
+                }
+            } else if (x == lowerBound) {
+                boolean lowerBoundRule = !isSupportLowerBoundInclusive() || !Double.isInfinite(returnValue) && !Double.isNaN(returnValue);
+                if (!lowerBoundRule) {
+                    throw new RuntimeException("[Defects4J_BugReport_Violation]");
+                } else {
+                    return returnValue;
+                }
+            } else {
+                return returnValue;
+            }
+        } else {
+            return density_original(x);
+        }
+    }
+
+    public double density_original(double x) {
         final double nhalf = numeratorDegreesOfFreedom / 2;
         final double mhalf = denominatorDegreesOfFreedom / 2;
         final double logx = FastMath.log(x);
diff --git a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java
index 5d32f6ebf..ae6afafd8 100644
--- a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java
@@ -106,6 +106,33 @@ public class UniformRealDistribution extends AbstractRealDistribution {
 
     /** {@inheritDoc} */
     public double density(double x) {
+        if (Boolean.parseBoolean(System.getProperty("defects4j.instrumentation.enabled"))) {
+            double returnValue = density_original(x);
+            double upperBound = getSupportUpperBound();
+            double lowerBound = getSupportLowerBound();
+            if (x == upperBound) {
+                boolean upperBoundRule = !isSupportUpperBoundInclusive() || !Double.isInfinite(returnValue) && !Double.isNaN(returnValue);
+                if (!upperBoundRule) {
+                    throw new RuntimeException("[Defects4J_BugReport_Violation]");
+                } else {
+                    return returnValue;
+                }
+            } else if (x == lowerBound) {
+                boolean lowerBoundRule = !isSupportLowerBoundInclusive() || !Double.isInfinite(returnValue) && !Double.isNaN(returnValue);
+                if (!lowerBoundRule) {
+                    throw new RuntimeException("[Defects4J_BugReport_Violation]");
+                } else {
+                    return returnValue;
+                }
+            } else {
+                return returnValue;
+            }
+        } else {
+            return density_original(x);
+        }
+    }
+
+    public double density_original(double x) {
         if (x < lower || x > upper) {
             return 0.0;
         }
